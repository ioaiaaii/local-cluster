# -*- mode: ruby -*-
# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = "2"

#Cluster
CLUSTER = {
  "master" => { :count => 1, :cpus => 2, :mem => 2048, :groups => "masters" },
  "worker" => { :count => 2, :cpus => 5, :mem => 2048, :groups => "workers" }
}

#OS
IMAGE_NAME = "bento/ubuntu"
IMAGE_TAG = "22.04"
IMAGE = IMAGE_NAME + "-" + IMAGE_TAG

#Network
SUBNET="192.168.51."
DOMAIN_NAME="cluster.localnet"
METALLB="192.168.51.20"

#Kubernetes
KUBERNETES_VERSION="1.24.0"
CLUSTER_NAME="local-cluster"
CLUSTER_USER="local-user"

#Ansible
ANSIBLE_PLAYBOOK="../configuration/kubernetes-deployment.yaml"

## Init var groups, for dynamic inventory creation
groups = {
    "masters" => [],
    "workers" => [],
    "all:children" => ["masters", "workers"],
    "all:vars" => {"domain_name" => DOMAIN_NAME,
                   "metal_lb_ip" => METALLB,
                   "kubernetes_version" => KUBERNETES_VERSION,
                   "cluster_name" => CLUSTER_NAME,
                   "cluster_user" => CLUSTER_USER}
  }

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = IMAGE
    config.ssh.username = "vagrant"
    config.ssh.password = "vagrant"
    config.ssh.insert_key = true

    CLUSTER.each_with_index do |(type, info), index|

        (1..info[:count]).each do |i|
            config.vm.define "#{type}-0#{i}" do |cfg|
                append = true
                cfg.vm.provider :virtualbox do |vb, override|

                    HOSTNET="1#{index + i}"
                    HOSTNAME="#{type}-0#{i}"

                    override.vm.network "private_network", bridge: "bridge0",ip: "#{SUBNET}#{HOSTNET}"
                    override.vm.hostname = HOSTNAME
                    vb.name = HOSTNAME
                    vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus]]

                    if append
                        groups[info[:groups]].push(HOSTNAME)
                        append = false
                    end

                end

                if index == CLUSTER.size - 1 && i == 2
                    cfg.vm.provision "ansible" do |ansible|
                        ansible.playbook = ANSIBLE_PLAYBOOK
                        ansible.verbose = "v"
                        ansible.limit = "all"
                        ansible.groups = groups
                        ansible.raw_arguments = Shellwords.shellsplit(ENV['ANSIBLE_ARGS']) if ENV['ANSIBLE_ARGS']
                    end
                end
            end
        end
    end
end
